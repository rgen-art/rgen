//-----------------------------------------------------------------------------
// rgen.art
//-----------------------------------------------------------------------------
#include "emp_snd_sound.h"

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
#include "emp_mat_nurbs.h"

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
namespace emp { namespace snd {

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
sound_c::sound_c(void):
    m_sName(),
    m_pNurbs(),
    m_stChannelCount()
{ }

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
sound_c::~sound_c(void)
{ destroy(); }

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
void sound_c::create(void)
{ destroy(); }

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
void sound_c::destroy(void)
{
    m_sName = astring();
    m_pNurbs = nullptr;
    m_stChannelCount = 0;
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
EMP_RETURN float sound_c::begin(void) const
{ return m_pNurbs->points().count() > 1 ? m_pNurbs->points().first_val().x : 0; }

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
EMP_RETURN float sound_c::end(void) const
{ return m_pNurbs->points().count() > 1 ? m_pNurbs->points().last_ref().x : 0; }

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
EMP_RETURN float sound_c::duration(void) const
{ return end() - begin(); }

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
EMP_RETURN size_t sound_c::sample_count(void) const
{
    c_float fDuration = duration();
    return emp::ast::cast<size_t>(fDuration * 44100.0f);
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
EMP_RETURN float sound_c::sample(c_float a_fParameter) const
{ return m_pNurbs->points().count() >= 2 ? m_pNurbs->sample(a_fParameter).y : 0; }

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
EMP_RETURN float sound_c::solve(c_size EMP_XX_IF_ASSERT(a_stChannel), c_float a_fTime) const
{
    EMP_ASSERT(a_stChannel == 0);
    EMP_ASSERT(a_stChannel < channel_count());

    c_float fAbsTime = begin() + a_fTime;
    float fParameter = 0.0f;
    c_size stCount = m_pNurbs->points().count();
    if (stCount >= 2)
    { fParameter = m_pNurbs->solve(fAbsTime); }
    c_float fSample = sample(fParameter);
    return fSample;
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
EMP_RETURN float sound_c::solve(c_size a_stChannel, c_size a_stSample) const
{
    c_float fTime = emp::ast::cast<float>(a_stSample) / 44100.0f;
    return solve(a_stChannel, fTime);
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
} }

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------

