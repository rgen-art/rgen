//-----------------------------------------------------------------------------
// rgen.art
//-----------------------------------------------------------------------------
#include "emp_snd_composition.h"

#include "emp_snd_track.h"

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
#include "emp_mat_algebra.h"

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
namespace emp { namespace snd {

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
composition_c::composition_c(void):
    m_su8Name(),
    m_vpTracks()
{ destroy(); }

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
composition_c::~composition_c(void)
{ destroy(); }

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
void composition_c::destroy(void)
{
    m_su8Name = u8string();
    m_vpTracks.resize(0);
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
void composition_c::merge(track_c& a_rTrack)
{
    // @@0  lib_snd merge track
    a_rTrack.destroy_track();
    c_size stCount = m_vpTracks.count();
    for (size_t stIndex = 0; stIndex < stCount; ++stIndex)
    { a_rTrack.copy(*m_vpTracks.ref(stIndex)); }
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
EMP_RETURN float composition_c::beat_per_minute(void) const
{
    float fMax = 0;
    c_size stCount = m_vpTracks.count();
    for (size_t stIndex = 0; stIndex < stCount; ++stIndex)
    { fMax = emp::tt::maxof(fMax, m_vpTracks.val(stIndex)->beat_per_minute()); }
    return fMax;
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
} }

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------

