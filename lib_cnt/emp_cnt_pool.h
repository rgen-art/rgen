//-----------------------------------------------------------------------------
// rgen.art
//-----------------------------------------------------------------------------
#ifndef EMP_CNT_POOL_H
#define EMP_CNT_POOL_H

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
#include "emp_cnt_array.h"
#include "emp_cnt_vector.h"

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
#include "emp_mem_reallocable.h"

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
namespace emp { namespace cnt {

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
template <typename T, c_size t_stSize>
EMP_NOCOPY(class, pool_t)
    using cell_t = emp::cnt::array<T, t_stSize, false>;

    vector<cell_t*> cells;

    size_t EMP_TT_MAX_VAR(cell);

public:
    pool_t(void) {}
    T* push(void)
    {
        if (cells.count() == 0)
        {
            cells.add(EMP_ALLOCATE(cell_t));
            cell = 0;
        }

        {
            cell_t* const pCell = cells.val(cell);
            c_size stCount = pCell->count();
            if ((stCount + 1) < t_stSize)
            {
                return &pCell->push();
            }
        }
        {
            cell_t* const pCell = EMP_ALLOCATE(cell_t);
            cells.add(pCell);
            return &pCell->push();
        }
    }
};

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
} }

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
#endif
